; 1章
; 
; 手続きによる抽象化
; ==================
;
; ぼくたちはこれから計算のプロセスを勉強する。
; 計算のプロセスはデータを扱う。
; それがどう進むかはプログラムによって制御される。
;
; 計算のプロセスは見る事も触る事もできない。
; でもとてもリアルなもの。
; 銀行からお金を引き出したりできる。
;
; 計算のプロセスはとても繊細。
; 初心者はプログラムで何が起こるかを予期できるように学ぶ必要がある。
; 小さなバグでも複雑な結果をうむ。
; 飛行機が墜落したりダムが決壊したりする。
;
; 達人は、プログラムが意図したとおりに動くようにできる。
; 何が起こるかを事前に図示できる。
; どういうふうに構造化すべきかを知っている。デバッグもできる。
; いいデザインは、モジュールごとに分かれている。
; 
; Lispでプログラムをつくるということ
; ----------------------------------
;
; 計算のプロセスを記述するために、今回ぼくたちはLispを使う。
; Lispは1950年代後半に John McCarthy が発明した。
;
; Lispは、オレオレな実験的な実装がいっぱい作られた。
; なのでモダンなアイデアがいっぱい実装されてる。
; 方言もいっぱいある。ここでは Scheme という方言を使う。
; 
; Lispは昔は数値を扱うのが非効率で遅かった。
; いまではかなり実用的になってるが、メインストリームじゃない。
;
; でも計算のプロセスの勉強のためにはいい特徴を持ってる。
; 手続きがデータとして表せるってことだ。
; だからプログラムをデータとして扱うプログラムを書くのが得意だ。
; インタープリターとかコンパイラーとか。
